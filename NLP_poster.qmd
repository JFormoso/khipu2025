---
title: "Consideraciones sobre la Ciencia Abierta de investigadores e investigadoras del sur global : un análisis desde herramientas de NLP"
author: "Formoso, J., Nanton, M. C., Loto, P. A."
format: html
editor: visual
execute: 
  echo: true
embed-resources: true
---

```{r}
# Paquetes
library(tidyverse)
library(tidytext)
library(googlesheets4)
library(topicmodels)
library(tm)
library(udpipe)
library(syuzhet)
library(SnowballC)
library(readxl)

quitar_tildes <- function(str) {
  return(stringi::stri_trans_general(str, "Latin-ASCII"))
}

```

```{r}

# Datos
datos <- read_sheet("1vvWC52QmhQNRTOrueGP9FtBDeGOwBDr-t95fb34gwGk", sheet = "info_inscriptos")

# datos <- read_xlsx(path = "khipu2025.xlsx", sheet = "info_inscriptos") 
  
# EXCLUIR RTAS NO ESP

datos <- datos %>% 
  filter(
  (is.na(interes_ES) | interes_ES != "Interesse na ciência aberta.") &
  (is.na(barreras_ES) | !str_detect(barreras_ES, "that will limit us to work openly, in those NDA they mention")) &
  (is.na(barreras_ES) | !str_detect(interes_ES, "I understand Spanish well but have difficulty writing in the language"))) %>% 
  
  # REMOVER TILDES
  mutate(interes_ES = quitar_tildes(interes_ES),
         barreras_ES = quitar_tildes(barreras_ES),
         publico_general_ES = quitar_tildes(publico_general_ES))
```

## Procesamientos base

Selección de preguntas abiertas

```{r}
texto_libre <- datos %>%  
  select(interes_ES,
         barreras_ES,
         publico_general_ES)

```

### Tokenización

Cargo modelo de lematización
```{r}
# Descargar y cargar un modelo para español
lematizador <- udpipe_download_model(language = "spanish")
lematizador <- udpipe_load_model(lematizador$file_model)
```


#### Interés

```{r}
# tok_interes: campo con interes por ciencia abierta 


tok_interes <- texto_libre %>%
  filter(!is.na(interes_ES)) %>%
  select(interes_ES) %>% 
  unnest_tokens(word, interes_ES) %>% 
  filter(!word %in% stopwords("es")) %>% 
  mutate(document = "interes_ES") %>% 
  mutate(stem = wordStem(word, "spanish")) #STEMMING

lematizador_tok_interes <- udpipe_annotate(lematizador, x = tok_interes$word) %>% 
  as.data.frame() %>%
  group_by(doc_id) %>%
  mutate(n = n()) %>% # Contamos cuántas veces aparece cada id
  filter(n == 1 | row_number() == 2) %>% # Nos quedamos con los únicos o el segundo duplicado
  select(-n) %>% # Quitamos la columna auxiliar
  ungroup()

tok_interes$lema <- lematizador_tok_interes$lemma

tok_interes %>% glimpse()
```

#### Barreras

```{r}
# tok_barreras: campo con barreras encontradas en ciencia abierta 

tok_barreras <- texto_libre %>%
  filter(!is.na(barreras_ES)) %>%
  select(barreras_ES) %>% 
  unnest_tokens(word, barreras_ES) %>% 
  filter(!word %in% stopwords("es")) %>% 
  mutate(document = "barreras_ES") %>% 
  mutate(stem = wordStem(word, "spanish")) #STEMMING

lematizador_tok_barreras <- udpipe_annotate(lematizador, x = tok_barreras$word) %>% 
  as.data.frame() %>%
  group_by(doc_id) %>%
  mutate(n = n()) %>% # Contamos cuántas veces aparece cada id
  filter(n == 1 | row_number() == 2) %>% # Nos quedamos con los únicos o el segundo duplicado
  select(-n) %>% # Quitamos la columna auxiliar
  ungroup()

tok_barreras$lema <- lematizador_tok_barreras$lemma

tok_barreras %>% glimpse()
```

#### Public

```{r}

# tok_public:campo con incidencia de ciencia abierta en publico en general

tok_public <- texto_libre %>%
  filter(!is.na(publico_general_ES)) %>%
  select(publico_general_ES) %>% 
  unnest_tokens(word, publico_general_ES)  %>% 
  filter(!word %in% stopwords("es")) %>% 
  mutate(document = "publico_general_ES") %>% 
  mutate(stem = wordStem(word, "spanish")) #STEMMING

lematizador_tok_public <- udpipe_annotate(lematizador, x = tok_public$word) %>% 
  as.data.frame() %>%
  group_by(doc_id) %>%
  mutate(n = n()) %>% # Contamos cuántas veces aparece cada id
  filter(n == 1 | row_number() == 2) %>% # Nos quedamos con los únicos o el segundo duplicado
  select(-n) %>% # Quitamos la columna auxiliar
  ungroup()

tok_public$lema <- lematizador_tok_public$lemma

tok_public %>% glimpse()

```

#### All

```{r}
# todo el texto junto
tok_all <- texto_libre %>% 
  pivot_longer(cols = interes_ES:publico_general_ES,
               values_to = "text") %>% 
  filter(!is.na(text)) %>%
  rename(document = name) %>% 
  unnest_tokens(word, text) %>% 
  filter(!word %in% stopwords("es")) %>% 
  mutate(stem = wordStem(word, "spanish")) #STEMMING

lematizador_tok_all <- udpipe_annotate(lematizador, x = tok_all$word) %>% 
  as.data.frame() %>%
  group_by(doc_id) %>%
  mutate(n = n()) %>% # Contamos cuántas veces aparece cada id
  filter(n == 1 | row_number() == 2) %>% # Nos quedamos con los únicos o el segundo duplicado
  select(-n) %>% # Quitamos la columna auxiliar
  ungroup()

tok_all$lema <- lematizador_tok_all$lemma

tok_all %>% glimpse()


```




### Conteo de frecuencias

#### Sin procesar

```{r}
tok_c_interes <- tok_interes %>% count(document, word)

tok_c_barreras <- tok_barreras %>% count(document, word)

tok_c_public <- tok_public %>% count(document, word)

tok_c_all <- tok_all %>% count(document, word)

```


#### Lemming stemming

```{r}
tok_c_interes_stem <- tok_interes %>% count(document, stem)

tok_c_barreras_stem <- tok_barreras %>% count(document, stem)

tok_c_public_stem <- tok_public %>% count(document, stem)

tok_c_all_stem <- tok_all %>% count(document, stem)
```

```{r}
tok_c_interes_lem <- tok_interes %>% count(document, lema)

tok_c_barreras_lem <- tok_barreras %>% count(document, lema)

tok_c_public_lem <- tok_public %>% count(document, lema)


tok_c_all_lem <- tok_all %>% count(document, lema)
```

### DTM

#### Sin procesar

```{r}
dtm_interes <- tok_c_interes %>% 
  cast_dtm(document, word, n)

dtm_barreras <- tok_c_barreras %>% 
  cast_dtm(document, word, n)

dtm_public <- tok_c_public %>% 
  cast_dtm(document, word, n)

dtm_all <- tok_c_all %>% 
  cast_dtm(document, word, n)
```

#### Lemming stemming

```{r}
dtm_interes_lem <- tok_c_interes_lem %>% 
  cast_dtm(document, lema, n)

dtm_barreras_lem <- tok_c_barreras_lem %>% 
  cast_dtm(document, lema, n)

dtm_public_lem <- tok_c_public_lem %>% 
  cast_dtm(document, lema, n)

dtm_all_lem <- tok_c_all_lem %>% 
  cast_dtm(document, lema, n)
```

```{r}
dtm_interes_stem <- tok_c_interes_stem %>% 
  cast_dtm(document, stem, n)

dtm_barreras_stem <- tok_c_barreras_stem %>% 
  cast_dtm(document, stem, n)

dtm_public_stem <- tok_c_public_stem %>% 
  cast_dtm(document, stem, n)

dtm_all_stem <- tok_c_all_stem %>% 
  cast_dtm(document, stem, n)
```

## Análisis de frecuencias

### Sin procesar

```{r}
tok_c_all <- tok_c_all %>% 
  arrange(desc(n))

total_words <- tok_c_all %>% 
  group_by(document) %>% 
  summarize(total = sum(n))

tok_c_all <- left_join(tok_c_all, total_words)

tok_c_all
```

```{r}
tok_c_all |>
  ggplot(aes(n/total, fill = document)) +
  geom_histogram(show.legend = FALSE) +
  facet_wrap(~document, ncol = 2, scales = "free")
```

```{r}

freq_by_rank <- tok_c_all %>% 
  group_by(document) %>% 
  mutate(rank = row_number(), 
         term_frequency = n/total) %>%
  ungroup()

freq_by_rank
```

```{r}
freq_by_rank %>% 
  ggplot(aes(rank, term_frequency, color = document)) + 
  geom_line(linewidth = 1.1, alpha = 0.8, show.legend = FALSE) + 
  scale_x_log10() +
  scale_y_log10()
```

```{r}
rank_subset <- freq_by_rank %>% 
  filter(rank < 500,
         rank > 10)

lm(log10(term_frequency) ~ log10(rank), data = rank_subset)
```

```{r}
freq_by_rank %>% 
  ggplot(aes(rank, term_frequency, color = document)) + 
  geom_abline(intercept = -0.62, slope = -1.1, 
              color = "gray50", linetype = 2) +
  geom_line(linewidth = 1.1, alpha = 0.8, show.legend = FALSE) + 
  scale_x_log10() +
  scale_y_log10()
```

```{r}
tf_idf <- tok_c_all %>%
  bind_tf_idf(word, document, n)

tf_idf |>
  select(-total) |>
  arrange(desc(tf_idf))
```

```{r}
tf_idf %>%
  group_by(document) %>%
  slice_max(tf_idf, n = 15) %>%
  ungroup() %>%
  ggplot(aes(tf_idf, fct_reorder(word, tf_idf), fill = document)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~document, ncol = 2, scales = "free") +
  labs(x = "tf-idf", y = NULL)
```

### Lemming

```{r}
tok_c_all_lem_filtrado <- tok_c_all_lem %>% 
  mutate(filtrado = case_when(document == "barrera_ES" & lema %in% c("barrera","barreras","principales") ~ 1,
                              document == "publico_general_ES" & lema %in% c("publico", "general") ~ 1,
                              document == "interes_ES" & str_detect(lema, "^interes|^querer") ~ 1,
                              lema == "abierta" ~ 1,
                              lema == "ciencia" ~ 1,
                              TRUE ~ 0)) |>
  filter(filtrado == 0) |>
  arrange(desc(n)) |>
  select(-filtrado)

total_words_lem_filtrado <- tok_c_all_lem_filtrado %>% 
  group_by(document) %>% 
  summarize(total = sum(n))


tok_c_all_lem_filtrado <- left_join(tok_c_all_lem_filtrado, total_words_lem_filtrado)

tok_c_all_lem_filtrado <- tok_c_all_lem_filtrado |>
  arrange(desc(n))

cols <- c("barreras_ES" = "#f67a21ff", "interes_ES" = "#00506fff", "publico_general_ES" = "#c63838ff")

facetas <- c(barreras_ES = "Barriers",
             publico_general_ES = "Public",
             interes_ES = "Interest")

library(tidytext)  # For reorder_within and scale_y_reordered

tok_c_all_lem_filtrado %>%
  arrange(desc(n)) %>%
  group_by(document) %>%
  slice_max(n, n = 10) %>%
  ungroup() %>%
  ggplot(aes(n, reorder_within(lema, n, document), fill = document)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~document, ncol = 3, scales = "free", labeller = as_labeller(facetas)) +
  labs(x = "Word frequency", y = NULL) +
  scale_fill_manual(values = cols, labels = c("Barriers", "Interest", "Public")) +
  scale_y_reordered() +  # This applies the reordered factor labels within each facet
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text.x = element_blank())


ggsave("word_frequency.png", width = 5, height = 1.7, dpi = 300)

```

```{r}
tok_c_all_lem_filtrado |>
  ggplot(aes(n/total, fill = document)) +
  geom_histogram(show.legend = FALSE) +
  facet_wrap(~document, ncol = 2, scales = "free")
```

```{r}

freq_by_rank_lem <- tok_c_all_lem_filtrado %>% 
  group_by(document) %>% 
  mutate(rank = row_number(), 
         term_frequency = n/total) %>%
  ungroup()

freq_by_rank_lem
```

```{r}
freq_by_rank_lem %>% 
  ggplot(aes(rank, term_frequency, color = document)) + 
  geom_line(linewidth = 1.1, alpha = 0.8, show.legend = FALSE) + 
  scale_x_log10() +
  scale_y_log10()
```

```{r}
rank_subset_lem <- freq_by_rank_lem %>% 
  filter(rank < 500,
         rank > 10)

lm(log10(term_frequency) ~ log10(rank), data = rank_subset_lem)
```

```{r}
freq_by_rank_lem %>% 
  ggplot(aes(rank, term_frequency, color = document)) + 
  geom_abline(intercept = -0.62, slope = -1.1, 
              color = "gray50", linetype = 2) +
  geom_line(linewidth = 1.1, alpha = 0.8, show.legend = FALSE) + 
  scale_x_log10() +
  scale_y_log10()
```

```{r}
tf_idf_lem <- tok_c_all_lem_filtrado %>%
  bind_tf_idf(lema, document, n)

tf_idf_lem |>
  select(-total) |>
  arrange(desc(tf_idf)) |>  view()
```

```{r}

cols <- c("barreras_ES" = "#f67a21ff", "interes_ES" = "#00506fff", "publico_general_ES" = "#c63838ff")

facetas <- c(barreras_ES = "Barriers",
             publico_general_ES = "Public",
             interes_ES = "Interest")

tf_idf_lem %>%
  group_by(document) %>%
  slice_max(tf_idf, n = 10) %>%
  ungroup() %>%
  ggplot(aes(tf_idf, fct_reorder(lema, tf_idf), fill = document)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~document, ncol = 3, scales = "free", labeller = as_labeller(facetas)) +
  labs(x = "tf-idf", y = NULL) +
  scale_fill_manual(values = cols, labels = c("Barriers", "Interest", "Public")) +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text.x = element_blank()) +
  xlab("TD x IDF")

ggsave("td-idf.png", width = 5, height = 1.7, dpi = 300)


```

```{r}
texto_libre |>
  filter(str_detect(barreras_ES, "alto impacto")) |>
  select(barreras_ES) |>
  view()
```


### Stemming

```{r}
tok_c_all_stem <- tok_c_all_stem %>% 
  arrange(desc(n))

total_words_stem <- tok_c_all_stem %>% 
  group_by(document) %>% 
  summarize(total = sum(n))

tok_c_all_stem <- left_join(tok_c_all_stem, total_words_stem)

tok_c_all_stem
```

```{r}
tok_c_all_stem |>
  ggplot(aes(n/total, fill = document)) +
  geom_histogram(show.legend = FALSE) +
  facet_wrap(~document, ncol = 2, scales = "free")
```

```{r}

freq_by_rank_stem <- tok_c_all_stem %>% 
  group_by(document) %>% 
  mutate(rank = row_number(), 
         term_frequency = n/total) %>%
  ungroup()

freq_by_rank_stem
```

```{r}
freq_by_rank_stem %>% 
  ggplot(aes(rank, term_frequency, color = document)) + 
  geom_line(linewidth = 1.1, alpha = 0.8, show.legend = FALSE) + 
  scale_x_log10() +
  scale_y_log10()
```

```{r}
rank_subset_stem <- freq_by_rank %>% 
  filter(rank < 500,
         rank > 10)

lm(log10(term_frequency) ~ log10(rank), data = rank_subset_stem)
```

```{r}
freq_by_rank_stem %>% 
  ggplot(aes(rank, term_frequency, color = document)) + 
  geom_abline(intercept = -0.62, slope = -1.1, 
              color = "gray50", linetype = 2) +
  geom_line(linewidth = 1.1, alpha = 0.8, show.legend = FALSE) + 
  scale_x_log10() +
  scale_y_log10()
```

```{r}
tf_idf_stem <- tok_c_all_stem %>%
  bind_tf_idf(stem, document, n)

tf_idf_stem |>
  select(-total) |>
  arrange(desc(tf_idf))
```

```{r}
tf_idf_stem %>%
  group_by(document) %>%
  slice_max(tf_idf, n = 15) %>%
  ungroup() %>%
  ggplot(aes(tf_idf, fct_reorder(stem, tf_idf), fill = document)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~document, ncol = 2, scales = "free") +
  labs(x = "tf-idf", y = NULL)
```

## Bigramas

```{r}

texto_libre1 <- texto_libre %>% 
  mutate_all(str_to_lower) |>
  mutate_all(quitar_tildes) |> 
  mutate_all(str_remove_all, "ciencia abierta") |> 
  mutate(barreras_ES = str_remove_all(barreras_ES, "principales barreras|barreras|barrera"),
         interes_ES = str_remove_all(interes_ES, "interes|interesa|interesante|interesar"),
         publico_general_ES = str_remove_all(publico_general_ES, "publico general")) |>
    pivot_longer(cols = interes_ES:publico_general_ES,
               values_to = "text") %>% 
  filter(!is.na(text)) %>%
  rename(document = name)

bigrams_all <- texto_libre1 |> 
  unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
  filter(!is.na(bigram)) 

bigrams_all %>%
  count(bigram, sort = TRUE)

bigrams_separated <- bigrams_all %>%
  separate(bigram, c("word1", "word2"), sep = " ")

bigrams_filtered <- bigrams_separated %>%
  filter(!word1 %in% stopwords("es")) %>%
  filter(!word2 %in% stopwords("es"))

# new bigram counts:
bigram_counts <- bigrams_filtered %>% 
  count(word1, word2, sort = TRUE)

bigram_counts

```

```{r}
bigrams_united <- bigrams_filtered %>%
  unite(bigram, word1, word2, sep = " ")

bigrams_united |> 
  count(document, bigram, sort = TRUE) |> 
  filter(document == "barreras_ES") |> 
  head(5)

bigrams_united |> 
  count(document, bigram, sort = TRUE) |> 
  filter(document == "interes_ES") |> 
  head(5)

bigrams_united |> 
  count(document, bigram, sort = TRUE) |> 
  filter(document == "publico_general_ES") |> 
  head(5)

bigram_tf_idf <- bigrams_united %>%
  count(document, bigram) %>%
  bind_tf_idf(bigram, document, n) %>%
  arrange(desc(tf_idf))

bigram_tf_idf |>
  group_by(document) %>%
  slice_max(tf_idf, n = 5) %>%
  ungroup() %>% 
  ggplot(aes(tf_idf, fct_reorder(bigram, tf_idf), fill = document)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~document, ncol = 3, scales = "free", labeller = as_labeller(facetas)) +
  labs(x = "tf-idf", y = NULL) +
  scale_fill_manual(values = cols, labels = c("Barriers", "Interest", "Public")) +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text.x = element_blank()) +
  xlab("TF x IDF")

ggsave("bigramas-td-idf.png", width = 6, height = 1.3, dpi = 300)

```

## Correlaciones

```{r}
document_word <- texto_libre1 %>%
  filter(document == "barreras_ES") %>%
  mutate(respuesta = row_number()) %>%
  unnest_tokens(word, text) %>%
  filter(!word %in% stopwords("es"))

document_word

library(widyr)

# count words co-occuring within sections
word_pairs <- document_word %>%
  pairwise_count(word, respuesta, sort = TRUE)

word_pairs
```


## Análisis de sentimiento del texto completo 

```{r}
# solo para verificar el contenido de tok_all
tok_all %>% glimpse()
```


#### Limpieza

```{r}
# elimino las stopwords

tok_all_sin_sw <- tok_all |>
  filter(!word %in% stopwords("es")) |>
  filter(!word %in% ("ciencia")) |>
   filter(!word %in% ("abierta")) |>
   filter(!word %in% ("7")) |>
   filter(!word %in% ("NA")) |>
   filter(!is.na(word))
     
tok_all_sin_sw |> glimpse()

```
### Sin Procesamiento

```{r}
palabra.df <- as.vector(tok_all_sin_sw$word)
palabra.df
```


```{r}
# La función get_nrc_sentiments() nos permite obtener léxicos de sentimientos específicos

sentimientos_df <- get_nrc_sentiment(palabra.df, lang="spanish")
sentimientos_df |> glimpse()
```


```{r}

#Unimos sentimientos_df con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df2 <- cbind(palabra.df, sentimientos_df)
head(df2)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion.df3 <- data.frame(t(sentimientos_df))
emocion.df3

#Sumamos los puntajes de cada emocion
emocion.df3 <- data.frame(rowSums(emocion.df3))

#Nombramos la columna de puntajes como total
names(emocion.df3)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion.df3 <- cbind("sentimiento" = rownames(emocion.df3), emocion.df3)
emocion.df3

#Quitamos el nombre de las filas
rownames(emocion.df3) <- NULL

#Verificamos el data frame
print(emocion.df3)
emocion.df3
```



```{r}
library("RColorBrewer")

sentimientos_total <- ggplot(emocion.df3[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size=20,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_total 

```


```{r}


#grafico de sentimientos de interes: positivo/negativo

sentimientos_binario <- ggplot(emocion.df3[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento del texto completo",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size=18,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_binario 

```

#### Análisis de sentimientos luego de aplicar la técnica de Stemming al texto completo

```{r}
palabra_stem.df <- as.vector(tok_all_sin_sw$stem)
palabra_stem.df
```

```{r}
# procesamiento utilizando solo los perminos luego de aplicar stemming
# La función get_nrc_sentiments() nos permite obtener léxicos de sentimientos específicos

sentimientos_stem_df <- get_nrc_sentiment(palabra_stem.df, lang="spanish")
sentimientos_stem_df |> glimpse()
```


```{r}

#Unimos sentimientos_df con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df_stem <- cbind(palabra_stem.df, sentimientos_stem_df)
head(df_stem)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion_com_stem <- data.frame(t(sentimientos_stem_df))
emocion_com_stem

#Sumamos los puntajes de cada emocion
emocion_com_stem <- data.frame(rowSums(emocion_com_stem))

#Nombramos la columna de puntajes como total
names(emocion_com_stem)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion_com_stem <- cbind("sentimiento" = rownames(emocion_com_stem), emocion_com_stem)
emocion_com_stem

#Quitamos el nombre de las filas
rownames(emocion_com_stem) <- NULL

#Verificamos el data frame
print(emocion_com_stem)
emocion_com_stem
```


```{r}
library("RColorBrewer")

sentimientos_total_stem <- ggplot(emocion_com_stem[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de palabras luego de aplicar stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Pastel1") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 12 ,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_total_stem 

```


```{r}


#grafico de sentimientos de interes: positivo/negativo

sentimientos_binario <- ggplot(emocion_com_stem[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento P/N del texto completo con stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 12,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_binario 

```


#### Análisis de sentimientos luego de aplicar la técnica de lematización al texto completo

```{r}
palabra_lem.df <- as.vector(tok_all_sin_sw$lema)
palabra_lem.df
```

```{r}
# La función get_nrc_sentiments() nos permite obtener léxicos de sentimientos específicos

sentimientos_lem_df <- get_nrc_sentiment(palabra_lem.df, lang="spanish")
sentimientos_lem_df |> glimpse()
```


```{r}

#Unimos sentimientos_df con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df_lem <- cbind(palabra_lem.df, sentimientos_lem_df)
head(df_lem)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion_con_lem <- data.frame(t(sentimientos_lem_df))
emocion_con_lem

#Sumamos los puntajes de cada emocion
emocion_con_lem <- data.frame(rowSums(emocion_con_lem))

#Nombramos la columna de puntajes como total
names(emocion_con_lem)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion_con_lem <- cbind("sentimiento" = rownames(emocion_con_lem), emocion_con_lem)
emocion_con_lem

#Quitamos el nombre de las filas
rownames(emocion_con_lem) <- NULL

#Verificamos el data frame
print(emocion_con_lem)
emocion_con_lem
```



```{r}
library("RColorBrewer")

sentimientos_total_lem <- ggplot(emocion_con_lem[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento del texto completo luego de aplicar lematización",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Pastel1") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size= 11,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_total_lem 

```


```{r}


#grafico de sentimientos de interes: positivo/negativo

sentimientos_binario_lem <- ggplot(emocion_con_lem[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento P/N del texto completo con lematización",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 12,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_binario_lem 

```


#### Análisis de sentimientos por secciones 

###  Análisis de la sección Interes Sin procesamiento extra

```{r}
# análisis de sentimiento de la sección Interes


interes.df <- tok_all_sin_sw %>% filter(document== 'interes_ES')
interes.df %>% glimpse()
```

```{r}
# tomo solo las palabras sin la etiqueta de interes
palabra.interes.df <- as.vector(interes.df$word)
palabra.interes.df

```

```{r}
# La función get_nrc_sentiments() aplicada solo a interes

sentimientos_int_df <- get_nrc_sentiment(palabra.interes.df, lang="spanish")
sentimientos_int_df |> glimpse()
```


```{r}
#Unimos el df de sentimientos de interes con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df2 <- cbind(palabra.interes.df, sentimientos_int_df)
head(df2)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion.interes.df <- data.frame(t(sentimientos_int_df))
emocion.interes.df

#Sumamos los puntajes de cada emocion
emocion.interes.df <- data.frame(rowSums(emocion.interes.df))

#Nombramos la columna de puntajes como total
names(emocion.interes.df)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion.interes.df <- cbind("sentimiento" = rownames(emocion.interes.df), emocion.interes.df)
emocion.interes.df

#Quitamos el nombre de las filas
rownames(emocion.interes.df) <- NULL

#Verificamos el data frame
print(emocion.interes.df)
emocion.interes.df

```


```{r}
#grafico de sentimientos de interes

sentimientos_interes <- ggplot(emocion.interes.df[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de interes",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size=20,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_interes 
```


```{r}

#grafico de sentimientos de interes: positivo/negativo

sentimientos_interes <- ggplot(emocion.interes.df[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento positivo/negativo",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size=20,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_interes 
```



###  Análisis de la SECCION INTERES CON STEMMING

```{r}
tok_interes %>% glimpse()
```

```{r}
interes_stem <- as.vector(tok_interes$stem)
interes_stem
```

```{r}
# procesamiento utilizando solo los perminos luego de aplicar stemming
# La función get_nrc_sentiments() nos permite obtener léxicos de sentimientos específicos

sentimientos_stem_interes <- get_nrc_sentiment(interes_stem, lang="spanish")
sentimientos_stem_interes |> glimpse()
```

```{r}

#Unimos sentimientos_df con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df_stem_interes <- cbind(interes_stem, sentimientos_stem_interes)
head(df_stem_interes)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion_interes_stem <- data.frame(t(sentimientos_stem_interes))
emocion_interes_stem

#Sumamos los puntajes de cada emocion
emocion_interes_stem <- data.frame(rowSums(emocion_interes_stem))

#Nombramos la columna de puntajes como total
names(emocion_interes_stem)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion_interes_stem <- cbind("sentimiento" = rownames(emocion_interes_stem), emocion_interes_stem)
emocion_interes_stem

#Quitamos el nombre de las filas
rownames(emocion_interes_stem) <- NULL

#Verificamos el data frame
print(emocion_interes_stem)
emocion_interes_stem
```

```{r}

grafico_interes_stem <- ggplot(emocion_interes_stem[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de la sección interés luego de aplicar stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Pastel1") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 10 ,face = "bold"),
        legend.position = "none") 
        
  
grafico_interes_stem 

```


### Grafico con colores metadocencia

```{r}
cols <- c("barreras_ES" = "#f67a21ff", "interes_ES" = "#00506fff", "publico_general_ES" = "#c63838ff")
facetas <- c(barreras_ES = "Barriers",
             publico_general_ES = "Public",
             interes_ES = "Interest")
```



```{r}
# ggplot(aes(tf_idf, fct_reorder(lema, tf_idf)
grafico_interes_stem <- ggplot(emocion_interes_stem[1:8,],
                        aes(x = total,
                            fct_reorder(sentimiento, total), fill = sentimiento)) + 
    geom_bar(stat = "identity", show.legend = FALSE ) +
    labs(title = "Interest",
       x = " ", y = " ") +  #x = "Sentiment Analysis", y = " "
   theme(plot.title = element_text(hjust = 5.0),
         axis.text = element_text(size= 12),
         axis.title = element_text(size= 10),
         title = element_text(size= 10)) +
  theme_minimal() + 
  theme(panel.grid = element_blank(),
        axis.text.x = element_blank()) +
  scale_fill_manual(values= c("#00506fff", "#00506fff","#00506fff", "#00506fff", "#00506fff", "#00506fff", "#00506fff", "#00506fff")) 
  
grafico_interes_stem

ggsave("interes_con_stem.png", width = 5, height = 1.7, dpi = 300)
  
# tf_idf_lem %>%
#   group_by(document) %>%
#   slice_max(tf_idf, n = 10) %>%
#   ungroup() %>%
#   ggplot(aes(tf_idf, fct_reorder(lema, tf_idf), fill = document)) +
#   geom_col(show.legend = FALSE) +
#   facet_wrap(~document, ncol = 3, scales = "free", labeller = as_labeller(facetas)) +
#   labs(x = "tf-idf", y = NULL) +
#   scale_fill_manual(values = cols, labels = c("Barriers", "Interest", "Public")) +
#   theme_minimal() +
#   theme(panel.grid = element_blank(),
#         axis.text.x = element_blank()) +
#   xlab("TD x IDF")

#ggsave("sentimiento_interes.png", width = 5, height = 1.7, dpi = 300)


```





```{r}


#grafico de sentimientos de interes: positivo/negativo

grafico_binario_interes_stem <- ggplot(emocion_interes_stem[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento P/N de la sección interés con stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 12,face = "bold"),
        legend.position = "none") 
        
  
grafico_binario_interes_stem 

```


##  Análisis de la sección Interes con Lematización



###  Análisis de la sección Barreras Sin procesamiento extra

```{r}
# análisis de sentimiento de la sección Barreras

barreras.df <- tok_all_sin_sw %>% filter(document== 'barreras_ES')
barreras.df %>% glimpse()

```
```{r}

# tomo solo las palabras sin la etiqueta de barreras
palabra.barreras.df <- as.vector(barreras.df$word)
palabra.barreras.df
```

```{r}

# La función get_nrc_sentiments() aplicada solo a barreras
sentimientos_bar_df <- get_nrc_sentiment(palabra.barreras.df, lang="spanish")
sentimientos_bar_df |> glimpse()
```

```{r}
#Unimos el df de sentimientos de interes con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df_barrera_sent <- cbind(palabra.barreras.df, sentimientos_bar_df)
head(df_barrera_sent)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion.barrera.df <- data.frame(t(sentimientos_bar_df))
emocion.barrera.df

#Sumamos los puntajes de cada emocion
emocion.barrera.df <- data.frame(rowSums(emocion.barrera.df))

#Nombramos la columna de puntajes como total
names(emocion.barrera.df)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion.barrera.df <- cbind("sentimiento" = rownames(emocion.barrera.df), emocion.barrera.df)
emocion.barrera.df

#Quitamos el nombre de las filas
rownames(emocion.barrera.df) <- NULL

#Verificamos el data frame
print(emocion.barrera.df)
emocion.barrera.df

```

```{r}
#grafico de sentimientos de barreras

sentimientos_barrera <- ggplot(emocion.barrera.df[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de barreras",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size=20,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_barrera 
```

```{r}
#grafico de sentimientos de barreras: positivo/negativo


sentimientos_barrera_binario <- ggplot(emocion.barrera.df[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de barreras P/N",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size=20,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_barrera_binario 
```

###  Análisis de la sección Barreras con Stemming


```{r}
tok_barreras %>% glimpse()
```

```{r}
barreras_stem <- as.vector(tok_barreras$stem)
barreras_stem
```

```{r}
# procesamiento utilizando solo los perminos luego de aplicar stemming
# La función get_nrc_sentiments() nos permite obtener léxicos de sentimientos específicos

sentimientos_stem_barreras <- get_nrc_sentiment(barreras_stem, lang="spanish")
sentimientos_stem_barreras |> glimpse()
```

```{r}

#Unimos sentimientos_df con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df_stem_barreras <- cbind(barreras_stem, sentimientos_stem_barreras)
head(df_stem_barreras)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion_barreras_stem <- data.frame(t(sentimientos_stem_barreras))
emocion_barreras_stem

#Sumamos los puntajes de cada emocion
emocion_barreras_stem <- data.frame(rowSums(emocion_barreras_stem))

#Nombramos la columna de puntajes como total
names(emocion_barreras_stem)[1] <- "total"

#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion_barreras_stem <- cbind("sentimiento" = rownames(emocion_barreras_stem), emocion_barreras_stem)
emocion_barreras_stem

#Quitamos el nombre de las filas
rownames(emocion_barreras_stem) <- NULL

#Verificamos el data frame
print(emocion_barreras_stem)
emocion_barreras_stem
```


```{r}

grafico_barreras_stem <- ggplot(emocion_barreras_stem[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de la sección barreras luego de aplicar stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Pastel1") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 10 ,face = "bold"),
        legend.position = "none") 
        
  
grafico_barreras_stem 

```


### Grafico Barreras con colores de metadocencia

```{r}

# ggplot(aes(tf_idf, fct_reorder(lema, tf_idf)
grafico_interes_stem <- ggplot(emocion_barreras_stem[1:8,],
                        aes(x = total,
                            fct_reorder(sentimiento, total), fill = sentimiento)) + 
    geom_bar(stat = "identity", show.legend = FALSE ) +
    labs(title = "Barriers",
       x = " ", y = " ") +  #x = "Sentiment Analysis", y = " "
   theme(plot.title = element_text(hjust = 1.0),
         axis.text = element_text(size= 12),
         axis.title = element_text(size= 10),
         title = element_text(size= 10)) +
  theme_minimal() + 
  theme(panel.grid = element_blank(),
        axis.text.x = element_blank()) +
  scale_fill_manual(values= c("#f67a21ff", "#f67a21ff","#f67a21ff", "#f67a21ff", "#f67a21ff", "#f67a21ff", "#f67a21ff", "#f67a21ff")) 
  
grafico_interes_stem

ggsave("barreras_con_stem.png", width = 5, height = 1.7, dpi = 300)
  


```





```{r}


#grafico de sentimientos de interes: positivo/negativo

grafico_binario_barreras_stem <- ggplot(emocion_barreras_stem[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento P/N de la sección barreras con stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 12,face = "bold"),
        legend.position = "none") 
        
  
grafico_binario_barreras_stem 

```




###  Análisis de la sección Publico Sin procesamiento extra

```{r}
# análisis de sentimiento de la sección publico 
publico.df <- tok_all_sin_sw %>% filter(document== 'publico_general_ES')
publico.df %>% glimpse()

```


```{r}
# tomo solo las palabras sin la etiqueta de publico 
palabra.publico.df <- as.vector(publico.df$word)
palabra.publico.df

```



```{r}
# La función get_nrc_sentiments() aplicada solo a barreras
sentimientos_publico_df <- get_nrc_sentiment(palabra.publico.df, lang="spanish")
sentimientos_publico_df |> glimpse()
```


```{r}

#Unimos el df de sentimientos de interes con el vector de palabras  para ver como
#se aplicó la función get_nrc_sentiment en cada una de ellas


df_publico_sent <- cbind(palabra.publico.df, sentimientos_publico_df)
head(df_publico_sent)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion.publico.df <- data.frame(t(sentimientos_publico_df))
emocion.publico.df

#Sumamos los puntajes de cada emocion
emocion.publico.df <- data.frame(rowSums(emocion.publico.df))

#Nombramos la columna de puntajes como total
names(emocion.publico.df)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion.publico.df <- cbind("sentimiento" = rownames(emocion.publico.df), emocion.publico.df)
emocion.publico.df

#Quitamos el nombre de las filas
rownames(emocion.publico.df) <- NULL

#Verificamos el data frame
print(emocion.publico.df)
emocion.publico.df


```

```{r}
#grafico de sentimientos de publico

sentimientos_publico <- ggplot(emocion.publico.df[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de de difusion al público",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size= 16,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_publico

```


```{r}
#grafico de sentimientos de publico: positivo/negativo


sentimientos_publico_binario <- ggplot(emocion.publico.df[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de difusion al público P/N",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size=12),
        axis.title = element_text(size=14,face = "bold"),
        title = element_text(size= 16,face = "bold"),
        legend.position = "none") 
        
  
sentimientos_publico_binario 


```


##  Análisis de la sección Publico con Stemming


```{r}
tok_public %>% glimpse()
```

```{r}
publico_stem <- as.vector(tok_public$stem)
publico_stem
```

```{r}
# procesamiento utilizando solo los perminos luego de aplicar stemming
# La función get_nrc_sentiments() nos permite obtener léxicos de sentimientos específicos

sentimientos_stem_publi <- get_nrc_sentiment(publico_stem, lang="spanish")
sentimientos_stem_publi |> glimpse()
```

```{r}

df_stem_publi <- cbind(publico_stem, sentimientos_stem_publi)
head(df_stem_publi)

#Creamos un data frame en el cual las filas serán las emociones
#y las columnas los puntajes totales

#Empezamos transponiendo sentimientos_df
emocion_publi_stem <- data.frame(t(sentimientos_stem_publi))
emocion_publi_stem

#Sumamos los puntajes de cada emocion
emocion_publi_stem <- data.frame(rowSums(emocion_publi_stem))

#Nombramos la columna de puntajes como total
names(emocion_publi_stem)[1] <- "total"



#Dado que las emociones son los nombres de las filas y no una variable
#transformamos el data frame para incluirlas dentro
emocion_publi_stem <- cbind("sentimiento" = rownames(emocion_publi_stem), emocion_publi_stem)
emocion_publi_stem

#Quitamos el nombre de las filas
rownames(emocion_publi_stem) <- NULL

#Verificamos el data frame
print(emocion_publi_stem)
emocion_publi_stem
```


```{r}

grafico_publi_stem <- ggplot(emocion_publi_stem[1:8,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento de la sección publico luego de aplicar stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Pastel1") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 10 ,face = "bold"),
        legend.position = "none") 
        
  
grafico_publi_stem 

```


###

```{r}
grafico_publico_stem <- ggplot(emocion_publi_stem[1:8,],
                        aes(x = total,
                            fct_reorder(sentimiento, total), fill = sentimiento)) + 
    geom_bar(stat = "identity", show.legend = FALSE ) +
    labs(title = "Public",
       x = " ", y = " ") +  #x = "Sentiment Analysis", y = " "
   theme(plot.title = element_text(hjust = 5.0),
         axis.text = element_text(size= 12),
         axis.title = element_text(size= 10),
         title = element_text(size= 10)) +
  theme_minimal() + 
  theme(panel.grid = element_blank(),
        axis.text.x = element_blank()) +
  scale_fill_manual(values= c("#c63838ff", "#c63838ff","#c63838ff", "#c63838ff", "#c63838ff", "#c63838ff", "#c63838ff", "#c63838ff")) 
  
grafico_publico_stem

ggsave("publico_con_stem.png", width = 5, height = 1.7, dpi = 300)
```




```{r}


#grafico de sentimientos de interes: positivo/negativo

grafico_binario_publi_stem <- ggplot(emocion_publi_stem[9:10,],
                        aes(x = sentimiento,
                            y = total, fill = sentimiento)) + 
  geom_bar(stat = "identity") +
  labs(title = "Análisis de sentimiento P/N de la sección publico con stemming",
       x = "Sentimiento", y = " ")+
  geom_text(aes(label = total),
            vjust = 1.5, color = "black",
            size =4) +
  theme_minimal() + scale_fill_brewer(palette = "Paired") +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text = element_text(size= 12),
        axis.title = element_text(size= 14,face = "bold"),
        title = element_text(size= 12,face = "bold"),
        legend.position = "none") 
        
  
grafico_binario_publi_stem 

```






##  Análisis de la sección Interes con Lematización



## Modelado de tópicos

### Sin procesar
DTM

```{r}
lda_all <- LDA(dtm_all, k = 2, control = list(seed = 1234))
topics_all <- tidy(lda_all)
```

```{r}
all_top_terms <- topics_all %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

all_top_terms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_all <- topics_all %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_all
```

#### Barreras

```{r}
lda_barreras <- LDA(dtm_barreras, k = 2, control = list(seed = 1234))
topics_barreras <- tidy(lda_barreras)
```

```{r}
barreras_top_terms <- topics_barreras %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

barreras_top_terms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_barreras <- topics_barreras %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_barreras
```

#### Interes

```{r}
lda_interes <- LDA(dtm_interes, k = 3, control = list(seed = 1234))
topics_interes <- tidy(lda_interes)
```

```{r}
interes_top_terms <- topics_interes %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)


#### DTM

interes_top_terms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_interes <- topics_interes %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_interes
```

#### Public

```{r}
lda_public <- LDA(dtm_public, k = 3, control = list(seed = 1234))
topics_public <- tidy(lda_public)
```

```{r}
public_top_terms <- topics_public %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

public_top_terms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_public <- topics_public %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_public
```

### Lemming

DTM

```{r}
lda_all <- LDA(dtm_all, k = 3, control = list(seed = 1234))
topics_all <- tidy(lda_all)
```

```{r}
all_top_terms <- topics_all %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

all_top_terms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_all <- topics_all %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_all
```

#### Barreras

```{r}
lda_barreras_lem <- LDA(dtm_barreras_lem, k = 2, control = list(seed = 1234))
topics_barreras_lem <- tidy(lda_barreras_lem)
```

```{r}
barreras_top_terms_lem <- topics_barreras_lem %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

barreras_top_terms_lem %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_barreras_lem <- topics_barreras_lem %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))

beta_wide_barreras_lem
```

#### Interes

```{r}
lda_interes_lem <- LDA(dtm_interes_lem, k = 2, control = list(seed = 1234))
topics_interes_lem <- tidy(lda_interes_lem)
```

```{r}
interes_top_terms_lem <- topics_interes_lem %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)


#### DTM

interes_top_terms_lem %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_interes_lem <- topics_interes_lem %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_interes_lem
```

#### Public

```{r}
lda_public_lem <- LDA(dtm_public_lem, k = 3, control = list(seed = 1234))
topics_public_lem <- tidy(lda_public_lem)
```

```{r}
public_top_terms_lem <- topics_public_lem %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

public_top_terms_lem %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_public_lem <- topics_public_lem %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_public_lem
```

### Stemming
DTM

```{r}
lda_all_stem <- LDA(dtm_all_stem, k = 3, control = list(seed = 1234))
topics_all_stem <- tidy(lda_all_stem)
```

```{r}
all_top_terms_stem <- topics_all_stem %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

all_top_terms_stem %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_all_stem <- topics_all_stem %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_all_stem
```

#### Barreras

```{r}
lda_barreras_stem <- LDA(dtm_barreras_stem, k = 3, control = list(seed = 1234))
topics_barreras_stem <- tidy(lda_barreras_stem)
```

```{r}
barreras_top_terms_stem <- topics_barreras_stem %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

barreras_top_terms_stem %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_barreras_stem <- topics_barreras_stem %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_barreras_stem
```

#### Interes

```{r}
lda_interes_stem <- LDA(dtm_interes_stem, k = 3, control = list(seed = 1234))
topics_interes_stem <- tidy(lda_interes_stem)
```

```{r}
interes_top_terms_stem <- topics_interes_stem %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)


#### DTM

interes_top_terms_stem %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_interes_stem <- topics_interes_stem %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_interes_stem
```

#### Public

```{r}
lda_public_stem <- LDA(dtm_public_stem, k = 3, control = list(seed = 1234))
topics_public_stem <- tidy(lda_public_stem)
```

```{r}
public_top_terms_stem <- topics_public_stem %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

public_top_terms_stem %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

```{r}
beta_wide_public_stem <- topics_public_stem %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))
beta_wide_public_stem
```
